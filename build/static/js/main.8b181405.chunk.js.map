{"version":3,"sources":["services/notes.js","Notification.js","CourseNotes.js","Statistics.js","GoodButton.js","App.js","index.js"],"names":["axios","get","newObject","post","id","put","Notification","message","className","CourseNotes","allCourses","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","notification","useEffect","noteService","then","response","data","notesToShow","filter","note","important","console","log","onClick","label","map","toggleImportance","find","n","changeNote","key","content","lastCreated","rows","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","Statistics","props","good","neutral","bad","GoodButton","handleclick","text","anecdotes","App","randomAnecdote","clicks","setClicks","floor","ReactDOM","render","document","getElementById"],"mappings":"8OAee,EAZA,WACb,OAAOA,IAAMC,IAHC,WAcD,EARA,SAAAC,GACb,OAAOF,IAAMG,KAPC,SAOaD,IAOd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAXO,SAWP,YAAwBD,GAAMF,ICCxBI,EAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAGP,yBAAKC,UAAU,iBACZD,I,8NCJP,IAoEeE,EApEK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACVC,mBAASD,GADC,mBAC7BE,EAD6B,KACtBC,EADsB,OAENF,mBAAS,IAFH,mBAE7BG,EAF6B,KAEpBC,EAFoB,OAGNJ,oBAAS,GAHH,mBAG7BK,EAH6B,KAGpBC,EAHoB,OAIIN,mBAAS,uBAJb,mBAI7BO,EAJ6B,UAMpCC,qBAAU,WACRC,IAAqBC,MAAK,SAAAC,GACxBT,EAASS,EAASC,WAEnB,IAEH,IAkBMC,EAAcR,EAAUJ,EAAQA,EAAMa,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAChEC,QAAQC,IAAI,iBAAkBjB,GAkB9B,OACE,6BACE,kBAAC,EAAD,CAAeL,QAASW,IACxB,6BACE,4BAAQY,QAAS,kBAAKb,GAAYD,KAAlC,QACQA,EAAU,YAAc,QAGlC,4BAzBS,WACX,IACMe,EADiBP,EAAYQ,KAAI,SAAAN,GAAI,OAAIA,EAAKC,aACrB,qBAAuB,iBAChDM,EAAmB,SAAA7B,GACvB,IAAMsB,EAAOd,EAAMsB,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,E,yVAAU,IAAOV,EAAP,CAAaC,WAAYD,EAAKC,YAE9CP,EAAmBhB,EAAIgC,GACpBf,MAAK,SAAAC,GACJT,EAASD,EAAMoB,KAAI,SAAAN,GAAI,OAAIA,EAAKtB,KAAOA,EAAKsB,EAAOJ,EAASC,aAGlE,OACEC,EAAYQ,KAAI,SAAAN,GAAI,OAAI,wBAAIW,IAAKX,EAAKtB,IAAKsB,EAAKY,SAAWZ,EAAKa,YAAYD,QAApD,IAA6D,4BAAQR,QAAS,kBAAKG,EAAiBP,EAAKtB,MAAM2B,OAapIS,IAEH,0BAAMC,SAhDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBN,QAASxB,EACT+B,MAAM,IAAIC,MAAOC,YACjBpB,UAAWqB,KAAKC,SAAW,GAC3B7C,GAAIQ,EAAMsC,OAAS,GAErB9B,EAAmBwB,GAChBvB,MAAK,SAAAC,GACJT,EAASD,EAAMuC,OAAO7B,EAASC,OAC/BR,EAAW,SAsCX,2BAAOqC,MAAOtC,EAASuC,SAnCJ,SAACX,GACxB3B,EAAW2B,EAAMY,OAAOF,UAmCpB,4BAAQG,KAAK,UAAb,WC3COC,EAtBI,SAACC,GAAW,IACtBlC,EAAQkC,EAARlC,KACP,OAAkB,IAAdA,EAAKmC,MAA8B,IAAhBnC,EAAKoC,SAA6B,IAAbpC,EAAKqC,IAE7C,6BACE,0CACA,6CAAmBrC,EAAKmC,MACxB,gDAAsBnC,EAAKoC,SAC3B,4CAAkBpC,EAAKqC,KACvB,2CAAiBrC,EAAKmC,KAAOnC,EAAKoC,QAAUpC,EAAKqC,IAAjD,KACA,2CAA8B,EAAZrC,EAAKmC,KAA4B,EAAfnC,EAAKoC,SAA4B,EAAZpC,EAAKqC,KAAWrC,EAAKmC,KAAOnC,EAAKoC,QAAUpC,EAAKqC,KACzG,+DAAsCrC,EAAKmC,MAAQnC,EAAKmC,KAAOnC,EAAKoC,QAAUpC,EAAKqC,KAAQ,MAK/F,6BACE,4DCVSC,EANI,SAACJ,GAClB,OACE,4BAAQ3B,QAAS2B,EAAMK,aAAcL,EAAMM,O,yjBCE/C/D,IAAMC,MAEN,IAAM+D,EAAY,CAChB,gCACA,6DACA,+LACA,kHACA,kDACA,sLAIIpD,EAAQ,CACZ,CACER,GAAI,EACJkC,QAAS,eACTO,KAAM,2BACNlB,WAAW,GAEb,CACEvB,GAAI,EACJkC,QAAS,sCACTO,KAAM,2BACNlB,WAAW,GAEb,CACEvB,GAAI,EACJkC,QAAS,+DACTO,KAAM,2BACNlB,WAAW,IAqCAsC,EAjCH,SAACR,GAAW,IAAD,EACO9C,mBAAS,CAAC+C,KAAM,EAAGC,QAAS,EAAGC,IAAK,EAAGM,eAAgB,KAD9D,mBACdC,EADc,KACNC,EADM,KAoBrB,OACE,6BACE,kBAAC,EAAD,CAAYN,YAnBG,WACjBM,EAAU,KAAID,EAAL,CAAaT,KAAMS,EAAOT,KAAO,MAkBHK,KAAK,cAC1C,4BAAQjC,QAhBU,WACpBsC,EAAU,KAAID,EAAL,CAAaR,QAASQ,EAAOR,QAAU,OAe9C,gBACA,4BAAQ7B,QAbM,WAChBsC,EAAU,KAAID,EAAL,CAAaP,IAAKO,EAAOP,IAAM,OAYtC,YACA,4BAAQ9B,QAVY,WACpB,IAAImB,EAASe,EAAUhB,KAAKqB,MAAMrB,KAAKC,SAAWe,EAAUd,SAC5DkB,EAAU,KAAID,EAAL,CAAaD,eAAgBjB,OAQtC,oBACA,kBAAC,EAAD,CAAY1B,KAAM4C,IAClB,2BAAIA,EAAOD,gBACX,kBAAC,EAAD,CAAaxD,WAAYE,MC7D/B0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8b181405.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { \n  getAll, \n  create, \n  update \n}\n","import React from 'react'\n\nconst Notification = ({message}) => {\n  if (message === null){\n    return null\n  }\n  return(\n    <div className=\"errorMessages\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, {useState, useEffect} from 'react';\nimport noteService from './services/notes'\nimport Notifications from './Notification'\n\nconst CourseNotes = ({allCourses}) => {\n  const [notes, setNotes] = useState(allCourses)\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [notification, setNotification] = useState('An error occured...')\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data)\n    })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n    noteService.create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n  }\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n  console.log('notesfiltering', notes)\n  const rows = () => {\n    const importantNotes = notesToShow.map(note => note.important)\n    const label = importantNotes ? 'make not important' : 'make important'\n    const toggleImportance = id =>{\n      const note = notes.find(n => n.id === id)\n      const changeNote = {...note, important: !note.important}\n\n      noteService.update(id, changeNote)\n        .then(response => {\n          setNotes(notes.map(note => note.id !== id ? note : response.data))\n        })\n    }\n    return (\n      notesToShow.map(note => <li key={note.id}>{note.content || note.lastCreated.content} <button onClick={() =>toggleImportance(note.id)}>{label}</button></li>)\n    ) \n  }\n\n  return (\n    <div>\n      <Notifications message={notification}/>\n      <div>\n        <button onClick={()=> setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default CourseNotes\n","import React from 'react';\nconst Statistics = (props) => {\n  const {data} = props\n  if (data.good !== 0 || data.neutral !==0 || data.bad !== 0){\n    return(\n      <div>\n        <h1>Statistics</h1>\n        <p>Rated for good {data.good}</p>\n        <p>Rated for neutral {data.neutral}</p>\n        <p>Rated for bad {data.bad}</p>\n        <p>All feedback {data.good + data.neutral + data.bad} </p>\n        <p>The average {((data.good * 1) + (data.neutral * 0) + (data.bad * -1))/data.good + data.neutral + data.bad}</p>\n        <p>The positive feedback percentage {(data.good / (data.good + data.neutral + data.bad)) * 100}</p>\n      </div>\n    )\n  }\n  return(\n    <div>\n      <p>Please rate to see any data</p>\n    </div>\n  )\n}\n\nexport default Statistics\n","import React from 'react';\n\nconst GoodButton = (props) => {\n  return(\n    <button onClick={props.handleclick}>{props.text}</button>\n  )\n}\n\nexport default GoodButton;\n","import React, {useState} from 'react';\nimport axios from 'axios'\nimport CourseNotes from './CourseNotes';\nimport Statistics from './Statistics';\nimport GoodButton from './GoodButton';\n\naxios.get()\n\nconst anecdotes = [\n  'If it hurts, do it more often',\n  'Adding manpower to a late software project makes it later!',\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n  'Premature optimization is the root of all evil.',\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n];\n\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nconst App = (props) => {\n  const [clicks, setClicks] = useState({good: 0, neutral: 0, bad: 0, randomAnecdote: \"\"})\n\n  const handleGood = () => {\n    setClicks({...clicks, good: clicks.good + 1})\n  }\n\n  const handleNeutral = () => {\n    setClicks({...clicks, neutral: clicks.neutral + 1})\n  }\n\n  const handleBad = () => {\n    setClicks({...clicks, bad: clicks.bad + 1})\n  }\n\n  const ramdonAnecdotes = () => {\n      let random = anecdotes[Math.floor(Math.random() * anecdotes.length)]\n      setClicks({...clicks, randomAnecdote: random})\n  }\n\n  return(\n    <div>\n      <GoodButton handleclick={handleGood} text=\"Rate good\"/>\n      <button onClick={handleNeutral}>Rate neutral</button>\n      <button onClick={handleBad}>Rate bad</button>\n      <button onClick={ramdonAnecdotes}>Random anecdotes</button>\n      <Statistics data={clicks}/>\n      <p>{clicks.randomAnecdote}</p>\n      <CourseNotes allCourses={notes}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}